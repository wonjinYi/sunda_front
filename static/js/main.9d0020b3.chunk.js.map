{"version":3,"sources":["components/Navigation.js","routes/Landing.js","routes/MainTimeline.js","App.js","serviceWorker.js","index.js","img/sunda_logo.png"],"names":["Navigation","id","src","Logo","alt","Ladning","class","to","MainTimeline","state","React","Component","App","path","exact","component","Landing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kVAaeA,MARf,WACI,OACI,yBAAKC,GAAG,OACJ,yBAAKC,IAAKC,IAAMC,IAAI,Y,YCsBjBC,MAtBf,WACI,OACI,yBAAKJ,GAAG,gBACJ,yBAAKA,GAAG,QACJ,yBAAKC,IAAKC,IAAMC,IAAI,eACpB,4BAAI,yBAAKE,MAAM,aAAX,yBAGR,yBAAKL,GAAG,YACJ,4EAAiD,yBAAKK,MAAM,aAAX,aACjD,uFACA,2BAAG,yBAAKA,MAAM,aAAX,4CAGP,yBAAKL,GAAG,OACJ,kBAAC,IAAD,CAAMM,GAAG,aAAY,uBAAGD,MAAM,sBAAT,yBACrB,uBAAGA,MAAM,kCAAT,uB,gCCJDE,E,4MAhBXC,MAAQ,G,uDAKJ,OACI,6BACI,kBAAC,EAAD,MACA,yD,GATWC,IAAMC,W,MCkBlBC,MAXf,WACE,OAEE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWC,IACxC,kBAAC,IAAD,CAAOH,KAAK,YAAYC,OAAO,EAAMC,UAAWP,MCJlCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAIDC,SAASC,eAAe,U,kBCZ3BC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.9d0020b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navigation.css\";\n\nimport Logo from \"../img/sunda_logo.png\";\n\nfunction Navigation() {\n    return (\n        <div id=\"nav\">\n            <img src={Logo} alt=\"SUNDA\"  />\n        </div>\n    );\n}\n\nexport default Navigation;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport \"./Landing.css\";\nimport \"./commonStyle.css\";\n\nimport Logo from \"../img/sunda_logo.png\";\n\nfunction Ladning () {\n    return (\n        <div id=\"Landing-main\">\n            <div id=\"logo\">\n                <img src={Logo} alt=\"sunda_logo\"></img>\n                <h2><div class=\"highlight\">We curate our today</div></h2>\n            </div>\n\n            <div id=\"contents\">\n                <p>Anyone can curate music from Infinite Source, <div class=\"highlight\">in SUNDA</div></p>\n                <p>Express and summarize your daily life in a different way</p>\n                <p><div class=\"highlight\">We, Curators of SUNDA, are waiting you</div></p>\n            </div>\n\n            <div id=\"btn\">\n                <Link to=\"/timeline\"><a class=\"button btn-landing\">Go to SUNDA Timeline</a></Link>\n                <a class=\"button button-fill btn-landing\">Be a new Curator</a>\n            </div>\n        </div>\n    );\n}\n\nexport default Ladning;","import React from 'react';\nimport Navigation from '../components/Navigation';\n\nclass MainTimeline extends React.Component{\n    state = {\n\n    };\n\n    render () {\n        return (\n            <div>\n                <Navigation />\n                <h1>Here is MainTImeline</h1>\n            </div>\n           \n        ); \n        \n    }\n}\n\nexport default MainTimeline;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport Landing from \"./routes/Landing\";\nimport MainTimeline from \"./routes/MainTimeline\";\n\nimport './App.css';\n\n\nfunction App() {\n  return ( \n    \n    <HashRouter>\n      \n      <Route path=\"/\" exact={true} component={Landing}/>\n      <Route path=\"/timeline\" exact={true} component={MainTimeline} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  \n  \n  ,document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/sunda_logo.7d51dda5.png\";"],"sourceRoot":""}